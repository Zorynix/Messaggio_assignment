version: "3.9"

services:
  postgres:
    container_name: postgres
    image: postgres
    volumes:
      - pg-data:/var/lib/postgresql/data
      - ./migrations/create_db.sql:/docker-entrypoint-initdb.d/1_create_db.sql
      - ./migrations/init.sql:/docker-entrypoint-initdb.d/2_init.sql
    env_file:
      - .env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-d", "db_prod"]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 80s
    ports:
      - "5432:5432"
    user: postgres
    restart: always

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    ports:
      - "29092:29092"
      - "9092:9092"
    depends_on:
      - zookeeper
    restart: unless-stopped

  kafdrop:
    image: obsidiandynamics/kafdrop
    container_name: kafdrop
    environment:
      KAFKA_BROKERCONNECT: "kafka:9092"
    ports:
      - "9000:9000"
    depends_on:
      - kafka
    restart: unless-stopped

  app:
    container_name: app
    build: .
    volumes:
      - ./logs:/logs
    env_file:
      - .env
    ports:
      - "8888:8888"
    depends_on:
      - postgres
      - kafka
    restart: unless-stopped

volumes:
  pg-data: